
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000001c0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000009a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000664  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000182  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a9  00000000  00000000  0000120e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013b  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000091  00000000  00000000  00001773  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  8a:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_reset>:
#define LCD_RW     0x02
#define LCD_EN     0x08

void lcd_reset(void)
{
	lcd_port = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	93 e1       	ldi	r25, 0x13	; 19
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_reset+0x8>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_reset+0xe>
  a0:	00 00       	nop
	_delay_ms(20);
	lcd_port = 0x30+LCD_EN;
  a2:	98 e3       	ldi	r25, 0x38	; 56
  a4:	95 bb       	out	0x15, r25	; 21
	lcd_port = 0x30;
  a6:	80 e3       	ldi	r24, 0x30	; 48
  a8:	85 bb       	out	0x15, r24	; 21
  aa:	e3 ec       	ldi	r30, 0xC3	; 195
  ac:	f9 e0       	ldi	r31, 0x09	; 9
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_reset+0x1c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_reset+0x22>
  b4:	00 00       	nop
	_delay_ms(10);
	lcd_port = 0x30+LCD_EN;
  b6:	95 bb       	out	0x15, r25	; 21
	lcd_port = 0x30;
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	e9 ef       	ldi	r30, 0xF9	; 249
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_reset+0x2c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_reset+0x32>
  c4:	00 00       	nop
	_delay_ms(1);
	lcd_port = 0x30+LCD_EN;
  c6:	95 bb       	out	0x15, r25	; 21
	lcd_port = 0x30;
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_reset+0x3c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_reset+0x42>
  d4:	00 00       	nop
	_delay_ms(1);
	lcd_port = 0x20+LCD_EN;
  d6:	88 e2       	ldi	r24, 0x28	; 40
  d8:	85 bb       	out	0x15, r24	; 21
	lcd_port = 0x20;
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	85 bb       	out	0x15, r24	; 21
  de:	e9 ef       	ldi	r30, 0xF9	; 249
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_reset+0x50>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_reset+0x56>
  e8:	00 00       	nop
	_delay_ms(1);
}
  ea:	08 95       	ret

000000ec <lcd_cmd>:


void lcd_cmd (char cmd)
{
	lcd_port = (cmd & 0xF0)|LCD_EN;
  ec:	98 2f       	mov	r25, r24
  ee:	90 7f       	andi	r25, 0xF0	; 240
  f0:	29 2f       	mov	r18, r25
  f2:	28 60       	ori	r18, 0x08	; 8
  f4:	25 bb       	out	0x15, r18	; 21
	lcd_port = (cmd & 0xF0);
  f6:	95 bb       	out	0x15, r25	; 21
	lcd_port = ((cmd << 4) & 0xF0)|LCD_EN;
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	82 95       	swap	r24
  fc:	92 95       	swap	r25
  fe:	90 7f       	andi	r25, 0xF0	; 240
 100:	98 27       	eor	r25, r24
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	98 27       	eor	r25, r24
 106:	98 2f       	mov	r25, r24
 108:	98 60       	ori	r25, 0x08	; 8
 10a:	95 bb       	out	0x15, r25	; 21
	lcd_port = ((cmd << 4) & 0xF0);
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	83 ef       	ldi	r24, 0xF3	; 243
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_cmd+0x26>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_cmd+0x2c>
 118:	00 00       	nop
 11a:	83 ef       	ldi	r24, 0xF3	; 243
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_cmd+0x32>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_cmd+0x38>
 124:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
}
 126:	08 95       	ret

00000128 <lcd_init>:


void lcd_init (void)
{
	lcd_reset();         // Call LCD reset lcd_cmd(0×28);
 128:	0e 94 49 00 	call	0x92	; 0x92 <lcd_reset>
	// 4-bit mode – 2 line – 5×7 font.
	lcd_cmd(0x0C);       // Display no cursor – no blink.
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	0e 94 76 00 	call	0xec	; 0xec <lcd_cmd>
	lcd_cmd(0x06);       // Automatic Increment – No Display shift.
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	0e 94 76 00 	call	0xec	; 0xec <lcd_cmd>
	lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 138:	80 e8       	ldi	r24, 0x80	; 128
 13a:	0e 94 76 00 	call	0xec	; 0xec <lcd_cmd>
}
 13e:	08 95       	ret

00000140 <lcd_data>:


// Function to display single Character
void lcd_data (unsigned char dat)
{
	lcd_port = ((dat & 0xF0)|LCD_EN|LCD_RS);
 140:	98 2f       	mov	r25, r24
 142:	90 7f       	andi	r25, 0xF0	; 240
 144:	29 2f       	mov	r18, r25
 146:	29 60       	ori	r18, 0x09	; 9
 148:	25 bb       	out	0x15, r18	; 21
	lcd_port = ((dat & 0xF0)|LCD_RS);
 14a:	91 60       	ori	r25, 0x01	; 1
 14c:	95 bb       	out	0x15, r25	; 21
	lcd_port = (((dat << 4) & 0xF0)|LCD_EN|LCD_RS);
 14e:	82 95       	swap	r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	98 2f       	mov	r25, r24
 154:	99 60       	ori	r25, 0x09	; 9
 156:	95 bb       	out	0x15, r25	; 21
	lcd_port = (((dat << 4) & 0xF0)|LCD_RS);
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	85 bb       	out	0x15, r24	; 21
 15c:	83 ef       	ldi	r24, 0xF3	; 243
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_data+0x20>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_data+0x26>
 166:	00 00       	nop
 168:	83 ef       	ldi	r24, 0xF3	; 243
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_data+0x2c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_data+0x32>
 172:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
}
 174:	08 95       	ret

00000176 <lcd_puts>:


// Function to display a String
void lcd_puts(char *a)
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 17c:	88 81       	ld	r24, Y
 17e:	88 23       	and	r24, r24
 180:	31 f0       	breq	.+12     	; 0x18e <lcd_puts+0x18>
	_delay_ms(2);
}


// Function to display a String
void lcd_puts(char *a)
 182:	21 96       	adiw	r28, 0x01	; 1
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
	lcd_data(a[i]);
 184:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_data>

// Function to display a String
void lcd_puts(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 188:	89 91       	ld	r24, Y+
 18a:	88 23       	and	r24, r24
 18c:	d9 f7       	brne	.-10     	; 0x184 <lcd_puts+0xe>
	lcd_data(a[i]);
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <main>:
#include <util/delay.h>
#include "lcd.h"
#define F_CPU 16000000UL
int main(void)
{
	lcd_init();
 194:	0e 94 94 00 	call	0x128	; 0x128 <lcd_init>
	lcd_cmd(0x01); // Clear screen
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 76 00 	call	0xec	; 0xec <lcd_cmd>
	lcd_cmd(0x80);  // Initially at first line
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	0e 94 76 00 	call	0xec	; 0xec <lcd_cmd>
	lcd_puts("electroons.com");
 1a4:	80 e6       	ldi	r24, 0x60	; 96
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	lcd_cmd(0xc0);  // Command to goto second line
 1ac:	80 ec       	ldi	r24, 0xC0	; 192
 1ae:	0e 94 76 00 	call	0xec	; 0xec <lcd_cmd>
	lcd_puts("LCD 4 Bit");
 1b2:	8f e6       	ldi	r24, 0x6F	; 111
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <main+0x26>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
