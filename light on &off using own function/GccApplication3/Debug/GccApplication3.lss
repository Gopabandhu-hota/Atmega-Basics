
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000035c  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ce  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a6  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ba  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000060  00000000  00000000  000010e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  8a:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay>:
void delay(int x)
{	
	int N;
	N=1;
	N=(16000/1024);
	N=N*x;
  92:	9c 01       	movw	r18, r24
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	82 0f       	add	r24, r18
  9a:	93 1f       	adc	r25, r19
  9c:	9c 01       	movw	r18, r24
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	28 0f       	add	r18, r24
  a8:	39 1f       	adc	r19, r25
	N=N/256;
  aa:	82 2f       	mov	r24, r18
  ac:	93 2f       	mov	r25, r19
  ae:	99 23       	and	r25, r25
  b0:	14 f4       	brge	.+4      	; 0xb6 <delay+0x24>
  b2:	81 50       	subi	r24, 0x01	; 1
  b4:	9f 4f       	sbci	r25, 0xFF	; 255
  b6:	29 2f       	mov	r18, r25
  b8:	33 27       	eor	r19, r19
  ba:	27 fd       	sbrc	r18, 7
  bc:	3a 95       	dec	r19
	TCNT0=0;
  be:	12 be       	out	0x32, r1	; 50
	int count=0;
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
	while(1)
	{
		if(TCNT0==255)
  c4:	42 b7       	in	r20, 0x32	; 50
  c6:	4f 3f       	cpi	r20, 0xFF	; 255
  c8:	11 f4       	brne	.+4      	; 0xce <delay+0x3c>
	{
		count++;
  ca:	01 96       	adiw	r24, 0x01	; 1
		TCNT0=0;
  cc:	12 be       	out	0x32, r1	; 50
	}
	if(count>=N)
  ce:	82 17       	cp	r24, r18
  d0:	93 07       	cpc	r25, r19
  d2:	c4 f3       	brlt	.-16     	; 0xc4 <delay+0x32>
		return;
	
	
	}			
}
  d4:	08 95       	ret

000000d6 <main>:
int main(void)
{	
	DDRB=0b11111111;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	87 bb       	out	0x17, r24	; 23
	TCCR0=TCCR0 | (1<<CS00) |(0<<CS01) | (1<<CS02);
  da:	83 b7       	in	r24, 0x33	; 51
  dc:	85 60       	ori	r24, 0x05	; 5
  de:	83 bf       	out	0x33, r24	; 51
	
    while(1)
    {	
		PORTB=0b11111111;
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	c8 bb       	out	0x18, r28	; 24
		delay(1000);
  e4:	88 ee       	ldi	r24, 0xE8	; 232
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	0e 94 49 00 	call	0x92	; 0x92 <delay>
		PORTB=0b00000000;
  ec:	18 ba       	out	0x18, r1	; 24
		delay(1000);
  ee:	88 ee       	ldi	r24, 0xE8	; 232
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	0e 94 49 00 	call	0x92	; 0x92 <delay>
  f6:	f5 cf       	rjmp	.-22     	; 0xe2 <main+0xc>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
