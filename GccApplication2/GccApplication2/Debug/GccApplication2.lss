
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004af  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014d  00000000  00000000  00000e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000036e  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000006c  00000000  00000000  000012e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011e  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d7  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 88 00 	call	0x110	; 0x110 <main>
  8a:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
#define DataPort	PORTB	// Using PortC as our Dataport
#define DataDDR		DDRB

//Interrupt Service Routine for INT0
ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	4f ef       	ldi	r20, 0xFF	; 255
  b0:	59 e6       	ldi	r21, 0x69	; 105
  b2:	68 e1       	ldi	r22, 0x18	; 24
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	50 40       	sbci	r21, 0x00	; 0
  b8:	60 40       	sbci	r22, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__vector_1+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__vector_1+0x2c>
  be:	00 00       	nop
	unsigned char i, temp;
	
	_delay_ms(500); // Software debouncing control
	
	temp = DataPort;	// Save current value on DataPort
  c0:	28 b3       	in	r18, 0x18	; 24
  c2:	85 e0       	ldi	r24, 0x05	; 5
	/* This for loop blink LEDs on Dataport 5 times*/
	for(i = 0; i<5; i++)
	{
		DataPort = 0x00;
		_delay_ms(500);	// Wait 5 seconds
		DataPort = 0xFF;
  c4:	9f ef       	ldi	r25, 0xFF	; 255
	temp = DataPort;	// Save current value on DataPort
	
	/* This for loop blink LEDs on Dataport 5 times*/
	for(i = 0; i<5; i++)
	{
		DataPort = 0x00;
  c6:	18 ba       	out	0x18, r1	; 24
  c8:	4f ef       	ldi	r20, 0xFF	; 255
  ca:	59 e6       	ldi	r21, 0x69	; 105
  cc:	68 e1       	ldi	r22, 0x18	; 24
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	50 40       	sbci	r21, 0x00	; 0
  d2:	60 40       	sbci	r22, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <__vector_1+0x3c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_1+0x46>
  d8:	00 00       	nop
		_delay_ms(500);	// Wait 5 seconds
		DataPort = 0xFF;
  da:	98 bb       	out	0x18, r25	; 24
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	59 e6       	ldi	r21, 0x69	; 105
  e0:	68 e1       	ldi	r22, 0x18	; 24
  e2:	41 50       	subi	r20, 0x01	; 1
  e4:	50 40       	sbci	r21, 0x00	; 0
  e6:	60 40       	sbci	r22, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <__vector_1+0x50>
  ea:	00 c0       	rjmp	.+0      	; 0xec <__vector_1+0x5a>
  ec:	00 00       	nop
  ee:	81 50       	subi	r24, 0x01	; 1
	_delay_ms(500); // Software debouncing control
	
	temp = DataPort;	// Save current value on DataPort
	
	/* This for loop blink LEDs on Dataport 5 times*/
	for(i = 0; i<5; i++)
  f0:	51 f7       	brne	.-44     	; 0xc6 <__vector_1+0x34>
		_delay_ms(500);	// Wait 5 seconds
		DataPort = 0xFF;
		_delay_ms(500);	// Wait 5 seconds
	}
	
	DataPort = temp;	//Restore old value to DataPort
  f2:	28 bb       	out	0x18, r18	; 24
}
  f4:	bf 91       	pop	r27
  f6:	af 91       	pop	r26
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	7f 91       	pop	r23
  fe:	6f 91       	pop	r22
 100:	5f 91       	pop	r21
 102:	4f 91       	pop	r20
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:

int main(void)
{
	DDRD = 1<<PD2;		// Set PD2 as input (Using for interupt INT0)
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	81 bb       	out	0x11, r24	; 17
	PORTD = 1<<PD2;		// Enable PD2 pull-up resistor
 114:	82 bb       	out	0x12, r24	; 18
	
	DataDDR = 0xFF;		// Configure Dataport as output
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	87 bb       	out	0x17, r24	; 23
	DataPort = 0x01;	// Initialise Dataport to 1
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	88 bb       	out	0x18, r24	; 24
	
	GICR = 1<<INT0;					// Enable INT0
 11e:	80 e4       	ldi	r24, 0x40	; 64
 120:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00;	// Trigger INT0 on rising edge
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	85 bf       	out	0x35, r24	; 53
	
	sei();				//Enable Global Interrupt
 126:	78 94       	sei
	
	while(1)
	{
		if(DataPort >= 0x80)
		DataPort = 1;
 128:	91 e0       	ldi	r25, 0x01	; 1
	
	sei();				//Enable Global Interrupt
	
	while(1)
	{
		if(DataPort >= 0x80)
 12a:	c7 9b       	sbis	0x18, 7	; 24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0x22>
		DataPort = 1;
 12e:	98 bb       	out	0x18, r25	; 24
 130:	03 c0       	rjmp	.+6      	; 0x138 <main+0x28>
		else
		DataPort = DataPort << 1;	// Shift to the left
 132:	88 b3       	in	r24, 0x18	; 24
 134:	88 0f       	add	r24, r24
 136:	88 bb       	out	0x18, r24	; 24
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	39 e6       	ldi	r19, 0x69	; 105
 13c:	48 e1       	ldi	r20, 0x18	; 24
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	30 40       	sbci	r19, 0x00	; 0
 142:	40 40       	sbci	r20, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x2e>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x38>
 148:	00 00       	nop
 14a:	ef cf       	rjmp	.-34     	; 0x12a <main+0x1a>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
