
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000329  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000099  00000000  00000000  00000c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000029e  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000098  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000034  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>

int main(void)
{		
	//when ADLAR=1,adc operation is 8 bit,only ADCH is read,then data gets lost,,ADCL is not read
	 ADMUX = (1<<REFS0) | (1<<ADLAR); //MUX0=MUX1=MUX2=0-ADC INPUT AT PIN0
  92:	80 e6       	ldi	r24, 0x60	; 96
  94:	87 b9       	out	0x07, r24	; 7
	 ADCSRA = (1<<ADEN) |(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);// ADC Enable and prescaler of 128// 16000000/128 = 125000
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
	 unsigned int adc_value; // Variable to hold ADC result
	 DDRB=0xff; // Set Port B as Output
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	87 bb       	out	0x17, r24	; 23
	 PORTB = 0x00;//INITIALISE to LED off at portB
  9e:	18 ba       	out	0x18, r1	; 24
         while(ADCSRA & 1<<ADSC);//wait for  conversion to complete
		 adc_value=ADCH;//operation becomes 8 bit mode
		 
		 if(adc_value>0 && adc_value<32)
		 {
			 PORTB=0b10000000;
  a0:	60 e8       	ldi	r22, 0x80	; 128
		 }
		 if(adc_value>32 && adc_value<64)
		 {
			 PORTB=0b01000000;
  a2:	50 e4       	ldi	r21, 0x40	; 64
		 }
		 if(adc_value>64 && adc_value<96)
		 {
			 PORTB=0b00100000;
  a4:	40 e2       	ldi	r20, 0x20	; 32
		 }
		 if(adc_value>96 && adc_value<128)
		 {
			 PORTB=0b00010000;
  a6:	70 e1       	ldi	r23, 0x10	; 16
		 }
		 if(adc_value>128 && adc_value<160)
		 {
			 PORTB=0b00001000;
  a8:	e8 e0       	ldi	r30, 0x08	; 8
		 }
		 if(adc_value>160 && adc_value<192)
		 {
			 PORTB=0b00000100;
  aa:	f4 e0       	ldi	r31, 0x04	; 4
		 }
		 if(adc_value>192 && adc_value<224)
		 {
			 PORTB=0b00000010;
  ac:	a2 e0       	ldi	r26, 0x02	; 2
		 }
		 if(adc_value>224 && adc_value<256 )
		 {
			 PORTB=0b00000001;
  ae:	b1 e0       	ldi	r27, 0x01	; 1
	 unsigned int adc_value; // Variable to hold ADC result
	 DDRB=0xff; // Set Port B as Output
	 PORTB = 0x00;//INITIALISE to LED off at portB
    while(1)
    {	
		ADCSRA |= (1<<ADSC); // Start conversion
  b0:	36 9a       	sbi	0x06, 6	; 6
         while(ADCSRA & 1<<ADSC);//wait for  conversion to complete
  b2:	36 99       	sbic	0x06, 6	; 6
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x20>
		 adc_value=ADCH;//operation becomes 8 bit mode
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	90 e0       	ldi	r25, 0x00	; 0
		 
		 if(adc_value>0 && adc_value<32)
  ba:	9c 01       	movw	r18, r24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	2f 31       	cpi	r18, 0x1F	; 31
  c2:	31 05       	cpc	r19, r1
  c4:	08 f4       	brcc	.+2      	; 0xc8 <main+0x36>
		 {
			 PORTB=0b10000000;
  c6:	68 bb       	out	0x18, r22	; 24
		 }
		 if(adc_value>32 && adc_value<64)
  c8:	9c 01       	movw	r18, r24
  ca:	21 52       	subi	r18, 0x21	; 33
  cc:	30 40       	sbci	r19, 0x00	; 0
  ce:	2f 31       	cpi	r18, 0x1F	; 31
  d0:	31 05       	cpc	r19, r1
  d2:	08 f4       	brcc	.+2      	; 0xd6 <main+0x44>
		 {
			 PORTB=0b01000000;
  d4:	58 bb       	out	0x18, r21	; 24
		 }
		 if(adc_value>64 && adc_value<96)
  d6:	9c 01       	movw	r18, r24
  d8:	21 54       	subi	r18, 0x41	; 65
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	2f 31       	cpi	r18, 0x1F	; 31
  de:	31 05       	cpc	r19, r1
  e0:	08 f4       	brcc	.+2      	; 0xe4 <main+0x52>
		 {
			 PORTB=0b00100000;
  e2:	48 bb       	out	0x18, r20	; 24
		 }
		 if(adc_value>96 && adc_value<128)
  e4:	9c 01       	movw	r18, r24
  e6:	21 56       	subi	r18, 0x61	; 97
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	2f 31       	cpi	r18, 0x1F	; 31
  ec:	31 05       	cpc	r19, r1
  ee:	08 f4       	brcc	.+2      	; 0xf2 <main+0x60>
		 {
			 PORTB=0b00010000;
  f0:	78 bb       	out	0x18, r23	; 24
		 }
		 if(adc_value>128 && adc_value<160)
  f2:	9c 01       	movw	r18, r24
  f4:	21 58       	subi	r18, 0x81	; 129
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	2f 31       	cpi	r18, 0x1F	; 31
  fa:	31 05       	cpc	r19, r1
  fc:	08 f4       	brcc	.+2      	; 0x100 <main+0x6e>
		 {
			 PORTB=0b00001000;
  fe:	e8 bb       	out	0x18, r30	; 24
		 }
		 if(adc_value>160 && adc_value<192)
 100:	9c 01       	movw	r18, r24
 102:	21 5a       	subi	r18, 0xA1	; 161
 104:	30 40       	sbci	r19, 0x00	; 0
 106:	2f 31       	cpi	r18, 0x1F	; 31
 108:	31 05       	cpc	r19, r1
 10a:	08 f4       	brcc	.+2      	; 0x10e <main+0x7c>
		 {
			 PORTB=0b00000100;
 10c:	f8 bb       	out	0x18, r31	; 24
		 }
		 if(adc_value>192 && adc_value<224)
 10e:	9c 01       	movw	r18, r24
 110:	21 5c       	subi	r18, 0xC1	; 193
 112:	30 40       	sbci	r19, 0x00	; 0
 114:	2f 31       	cpi	r18, 0x1F	; 31
 116:	31 05       	cpc	r19, r1
 118:	08 f4       	brcc	.+2      	; 0x11c <main+0x8a>
		 {
			 PORTB=0b00000010;
 11a:	a8 bb       	out	0x18, r26	; 24
		 }
		 if(adc_value>224 && adc_value<256 )
 11c:	81 5e       	subi	r24, 0xE1	; 225
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	8f 31       	cpi	r24, 0x1F	; 31
 122:	91 05       	cpc	r25, r1
 124:	28 f6       	brcc	.-118    	; 0xb0 <main+0x1e>
		 {
			 PORTB=0b00000001;
 126:	b8 bb       	out	0x18, r27	; 24
 128:	c3 cf       	rjmp	.-122    	; 0xb0 <main+0x1e>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
